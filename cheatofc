SOURCE CODE:
//EXP:5.1 Producer
#include <stdio.h>
#include <stdlib.h>
int mutex = 1, full = 0, empty = 3, x = 0;
void producer();
void consumer();
int wait(int *s);
int signal(int *s);
int main() {
int n;
printf("\n1. Producer\n2. Consumer\n3. Exit");
while (1) {
printf("\nEnter your choice: ");
scanf("%d", &n);
switch (n) {
case 1:
if ((mutex == 1) && (empty > 0))
producer();
else
printf("\nBuffer is full!!");
break;
case 2:
if ((mutex == 1) && (full > 0))
consumer();
else
printf("\nBuffer is empty!!");
break;
case 3:
exit(0);
break;
default:
printf("\nInvalid choice! Try again.");
}
}
return 0;
}
int wait(int *s) {
(*s)--;
return *s;
}
int signal(int *s) {
(*s)++;
return *s;
}
void producer() {
mutex = wait(&mutex);
full = signal(&full);
empty = wait(&empty);
x++;
printf("\nProducer produces item %d", x);
mutex = signal(&mutex);
}
void consumer() {
mutex = wait(&mutex);
full = wait(&full);
empty = signal(&empty);
printf("\nConsumer consumes item %d", x);
x--;
mutex = signal(&mutex);
}
Dining Philosophers Algorithm

//EXP:5.2. 
#include <stdio.h>
#define n 4 // Number of philosophers
int compltedPhilo = 0, i;
struct fork {
int taken;
} ForkAvil[n];
struct philosp {
int left;
int right;
} Philostatus[n];
void goForDinner(int philID) {
// If the philosopher has already completed dinner
if (Philostatus[philID].left == 10 && Philostatus[philID].right == 10) {
printf("Philosopher %d already completed dinner\n", philID + 1);
}
// If the philosopher has taken both forks, they complete dinner
else if (Philostatus[philID].left == 1 && Philostatus[philID].right == 1) {
printf("Philosopher %d completed dinner\n", philID + 1);
Philostatus[philID].left = Philostatus[philID].right = 10; // Mark as completed
// Release forks
int otherFork = philID - 1;
if (otherFork == -1)
otherFork = n - 1;
ForkAvil[philID].taken = ForkAvil[otherFork].taken = 0;
printf("Philosopher %d released fork %d and fork %d\n", philID + 1, philID + 1, 
otherFork + 1);
compltedPhilo++;
}
// If left fork is taken, try for the right fork
else if (Philostatus[philID].left == 1 && Philostatus[philID].right == 0) {
if (philID == (n - 1)) {
// Last philosopher picking fork in reverse order
if (ForkAvil[philID].taken == 0) {
ForkAvil[philID].taken = Philostatus[philID].right = 1;
printf("Fork %d taken by philosopher %d\n", philID + 1, philID + 1);
} else {
printf("Philosopher %d is waiting for fork %d\n", philID + 1, philID + 1);
}
} else {
int dupphilID = philID;
philID -= 1;
if (philID == -1)
philID = (n - 1);
if (ForkAvil[philID].taken == 0) {
ForkAvil[philID].taken = Philostatus[dupphilID].right = 1;
printf("Fork %d taken by philosopher %d\n", philID + 1, dupphilID + 1);
} else {
printf("Philosopher %d is waiting for Fork %d\n", dupphilID + 1, philID + 1);
}
}
}
// If neither fork is taken, take the left fork first
else if (Philostatus[philID].left == 0) {
if (philID == (n - 1)) {
// Last philosopher picking fork in reverse order
if (ForkAvil[philID - 1].taken == 0) {
ForkAvil[philID - 1].taken = Philostatus[philID].left = 1;
printf("Fork %d taken by philosopher %d\n", philID, philID + 1);
} else {
printf("Philosopher %d is waiting for fork %d\n", philID + 1, philID);
}
} else {
if (ForkAvil[philID].taken == 0) {
ForkAvil[philID].taken = Philostatus[philID].left = 1;
printf("Fork %d taken by Philosopher %d\n", philID + 1, philID + 1);
} else {
printf("Philosopher %d is waiting for Fork %d\n", philID + 1, philID + 1);
}
}
}
}
int main() {
// Initialize all forks as available and all philosophers as not having forks
for (i = 0; i < n; i++)
ForkAvil[i].taken = Philostatus[i].left = Philostatus[i].right = 0;
while (compltedPhilo < n) {
// Each philosopher attempts to eat
for (i = 0; i < n; i++)
goForDinner(i);
printf("\nTill now, number of philosophers who completed dinner: %d\n\n", 
compltedPhilo);
}
return 0;
}
Bankers Algorithm


//EXP-6
#include <stdio.h>
int main() {
int Max[10][10], need[10][10], alloc[10][10], avail[10], completed[10], 
safeSequence[10];
int p, r, i, j, process, count;
count = 0;
printf("Enter the no of processes : ");
scanf("%d", &p);
for (i = 0; i < p; i++)
completed[i] = 0;
printf("\n\nEnter the no of resources : ");
scanf("%d", &r)
printf("\n\nEnter the Max Matrix for each process : ");
for (i = 0; i < p; i++) {
printf("\nFor process %d : ", i + 1);
for (j = 0; j < r; j++)
scanf("%d", &Max[i][j]);
}
printf("\n\nEnter the allocation for each process : ");
for (i = 0; i < p; i++) {
printf("\nFor process %d : ", i + 1);
for (j = 0; j < r; j++)
scanf("%d", &alloc[i][j]);
printf("\n\nEnter the Available Resources : ");
for (i = 0; i < r; i++)
scanf("%d", &avail[i]);
for (i = 0; i < p; i++)
for (j = 0; j < r; j++)
need[i][j] = Max[i][j] - alloc[i][j];
do {
printf("\n Max matrix:\tAllocation matrix:\n");
for (i = 0; i < p; i++) {
for (j = 0; j < r; j++)
printf("%d ", Max[i][j]);
printf("\t\t");
for (j = 0; j < r; j++)
printf("%d ", alloc[i][j]);
printf("\n");
}
process = -1;
for (i = 0; i < p; i++) {
if (completed[i] == 0) { // if not completed
process = i;
for (j = 0; j < r; j++) {
if (avail[j] < need[i][j]) {
process = -1;
break;
}
}
}
if (process != -1)
break;
}
if (process != -1) {
printf("\nProcess %d runs to completion!", process + 1);
safeSequence[count] = process + 1;
count++;
for (j = 0; j < r; j++) {
avail[j] += alloc[process][j];
alloc[process][j] = 0;
Max[process][j] = 0;
}
completed[process] = 1;
}
} while (count != p && process != -1);
if (count == p) {
printf("\nThe system is in a safe state!!\n");
printf("Safe Sequence : < ");
for (i = 0; i < p; i++)
printf("%d ", safeSequence[i]);
printf(">\n");
} else {
printf("\nThe system is in an unsafe state!!\n");
}
return 0;
}
First Fit 

//EXP:7.1
#include <stdio.h>
int main()
{
int a[10], b[10], a1, b1, flags[10], all[10];
int i, j;
printf("\n\t\t\tMemory Management"
" Scheme -"
" First Fit\n");
for (i = 0; i < 10; i++)
{
flags[i] = 0;
all[i] = -1;
}
printf("Enter number of blocks: ");
scanf("%d", &a1);
printf("\nEnter the size of each"
" block:\n ");
for (i = 0; i < a1; i++)
{
printf("Block no.%d: ", i);
scanf("%d", &a[i]);
}
printf("\nEnter no. of "
"processes: ");
scanf("%d", &b1);
printf("\nEnter size of each"
" process:\n ");
for (i = 0; i < b1; i++)
{
printf("Process no.%d: ", i);
scanf("%d", &b[i]);
}
for (i = 0; i < b1; i++)
for (j = 0; j < a1; j++)
if (flags[j] == 0 && a[j] >= b[i])
{
all[j] = i;
flags[j] = 1;
break;
}
printf("\nBlock no.\tsize\t\t"
"process no.\t\tsize");
for (i = 0; i < a1; i++)
{
printf("\n%d\t\t%d\t\t",
i + 1, a[i]);
if (flags[i] == 1)
{
printf("%d\t\t\t%d", all[i]
+ 1, b[all[i]]);
}
else
printf("Not allocated");
}
printf("\n");
}
Best Fit Algorithm

EXP:7.2
#include <stdio.h>
int main()
{
int a[20], b[20], c[20], b1, c1;
int i, j, temp;
static int barr[20], carr[20];
printf("\n\t\t\tMemory Management Scheme - Best Fit");
printf("\nEnter the number of blocks:");
scanf("%d", &b1);
printf("Enter the number of processes:");
scanf("%d", &c1);
int lowest = 9999;
printf("\nEnter the size of the blocks:\n");
for (i = 1; i <= b1; i++)
{
printf("Block no.%d:", i);
scanf("%d", &b[i]);
}
printf("\nEnter the size of the processes :\n");
for (i = 1; i <= c1; i++)
{
printf("Process no.%d:", i);
scanf("%d", &c[i]);
}
for (i = 1; i <= c1; i++)
{
for (j = 1; j <= b1; j++)
{
if (barr[j] != 1)
{
temp = b[j] - c[i];
if (temp >= 0)
if (lowest > temp)
{
carr[i] = j;
lowest = temp;
}
}
}
a[i] = lowest;
barr[carr[i]] = 1;
lowest = 10000;
}
printf("\nProcess_no\tProcess_size\tBlock_no\t Block_size\tFragment");
for (i = 1; i <= c1 && carr[i] != 0; i++)
{
printf("\n%d\t\t%d\t\t%d\t\t %d\t\t%d", i,
c[i], carr[i], b[carr[i]], a[i]);
}
printf("\n");
}
Worst Fit


EXP:7.3
#include <stdio.h>
int main()
{
printf("\n\t\t\tMemory Management"
" Scheme - Worst Fit");
int i, j, nblocks, nfiles, temp, top = 0;
int frag[10], blocks[10], files[10];
static int block_arr[10], file_arr[10];
printf("\nEnter the Total Number "
"of Blocks: ");
scanf("%d", &nblocks);
printf("Enter the Total Number "
"of Files: ");
scanf("%d", &nfiles);
printf("\nEnter the Size of the "
"Blocks: \n");
for (i = 0; i < nblocks; i++)
{
printf("Block No.%d:\t", i + 1);
scanf("%d", &blocks[i]);
}
printf("Enter the Size of the "
"Files:\n");
for (i = 0; i < nfiles; i++)
{
printf("File No.%d:\t", i + 1);
scanf("%d", &files[i]);
}
for (i = 0; i < nfiles; i++)
{
for (j = 0; j < nblocks; j++)
{
if (block_arr[j] != 1)
{
temp = blocks[j] - files[i];
if (temp >= 0)
{
if (top < temp)
{
file_arr[i] = j;
top = temp;
}
}
}
frag[i] = top;
block_arr[file_arr[i]] = 1;
top = 0;
}
}
printf("\nFile Number\tFile Size\t"
"Block Number\tBlock Size\tFragment");
for (i = 0; i < nfiles; i++)
{
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d"
, i, files[i],
file_arr[i], blocks[file_arr[i]], frag[i]);
}
printf("\n");
return 0;
}

FIFO


//EXP-8.1
#include <stdio.h>
int main() {
int referenceString[10], pageFaults = 0, m, n, s, pages, frames;
printf("\nEnter the number of Pages:\t");
scanf("%d", &pages);
printf("\nEnter reference string values:\n");
for (m = 0; m < pages; m++) {
printf("Value No. [%d]:\t", m + 1);
scanf("%d", &referenceString[m]);
}
printf("\nWhat are the total number of frames:\t");
scanf("%d", &frames);
int temp[frames];
for (m = 0; m < frames; m++) {
temp[m] = -1;
}
for (m = 0; m < pages; m++) {
s = 0;
for (n = 0; n < frames; n++) {
if (referenceString[m] == temp[n]) {
s++;
pageFaults--;
break;
}
}
pageFaults++;
if ((pageFaults <= frames) && (s == 0)) {
temp[m] = referenceString[m];
} else if (s == 0) {
temp[(pageFaults - 1) % frames] = referenceString[m];
}
printf("\n");
for (n = 0; n < frames; n++) {
printf("%d\t", temp[n]);
}
}
printf("\nTotal Page Faults:\t%d\n", pageFaults);
return 0;
}
LRU Algorithm


//EXP-8.2
#include<stdio.h>
int main() {
int q[20], p[50], c = 0, c1, d, f, i, j, k = 0, n, r, t, b[20], c2[20];
printf("Enter no of pages:");
scanf("%d", &n);
printf("Enter the reference string:");
for (i = 0; i < n; i++)
scanf("%d", &p[i]);
printf("Enter no of frames:");
scanf("%d", &f);
for (i = 0; i < f; i++) {
q[i] = -1; // Initialize frames with -1 (empty)
}
printf("\n");
for (i = 0; i < n; i++) {
c1 = 0;
for (j = 0; j < f; j++) {
if (p[i] == q[j]) {
c1 = 1;
break;
}
}
if (c1 == 0) {
c++;
if (k < f) {
q[k] = p[i];
k++;
} else {
for (r = 0; r < f; r++) {
c2[r] = 0;
for (j = i - 1; j >= 0; j--) {
if (q[r] != p[j])
c2[r]++;
else
break;
}
}
int max = c2[0], pos = 0;
for (r = 1; r < f; r++) {
if (c2[r] > max) {
max = c2[r];
pos = r;
}
}
q[pos] = p[i];
}
}for (j = 0; j < f; j++) {
if (q[j] != -1)
printf("\t%d", q[j]);
else printf("\t-");
}printf("\n");
}printf("\nThe no of page faults is %d", c);
return 0;
}
Optimal 

//EXP-8.3
#include<stdio.h>
void printFrames(int fr[], int nf) {
for (int j = 0; j < nf; j++) {
printf("%d ", fr[j]);
}
printf("\n");
}
int full(int a[], int n) {
for (int k = 0; k < n; k++) {
if (a[k] == -1) return 0;
}
return 1;
}
int main() {
int fr[5], i, j, k, t[5], p = 0, flag = 0, page[25], psz, nf, t1, u[5];
printf("Enter the number of frames: ");
scanf("%d", &nf);
printf("Enter the page size: ");
scanf("%d", &psz);
printf("Enter the page sequence: ");
for(i = 0; i < psz; i++) scanf("%d", &page[i]);
for(i = 0; i < nf; i++) fr[i] = -1;
for(i = 0; i < psz; i++) {
if (full(fr, nf)) break;
else {
f
lag = 0;
for(j = 0; j < nf; j++) {
if(page[i] == fr[j]) {
f
lag = 1;
printf("\t%d:\t", page[i]);
break;
}
}
if(flag == 0) {
fr[p] = page[i];
printf("\t%d:\t", page[i]);
p++;
}
printFrames(fr, nf);
}
}
p = 0;
for(; i < psz; i++) {
f
lag = 0;
for(j = 0; j < nf; j++) {
if(page[i] == fr[j]) {
f
lag = 1;
break;
}
}
if(flag == 0) {
p++;
for(j = 0; j < nf; j++) {
for(k = i + 1; k < psz; k++) {
if(fr[j] == page[k]) {
u[j] = k;
break;
} else {
u[j] = 21;
}
}
}
for(j = 0; j < nf; j++) t[j] = u[j];
for(j = 0; j < nf; j++) {
for(k = j + 1; k < nf; k++) {
if(t[j] < t[k]) {
t1 = t[j];
t[j] = t[k];
t[k] = t1;
}
}
}
for(j = 0; j < nf; j++) {
if(t[0] == u[j]) {
fr[j] = page[i];
u[j] = i;
}
}
printf("Page fault\t");
} else {
printf("\t");
}
printf("%d:\t", page[i]);
printFrames(fr, nf);
}
printf("\nTotal page faults: %d", p + 3);
return 0;
}
FCFS Scheduling Algorithm
//EXP-9.1
#include <stdio.h>
#include <stdlib.h>
int main() {
 int RQ[100], i, n, TotalHeadMovement = 0, initial, count = 0;
 printf("Enter the number of Requests: ");
 scanf("%d", &n);
 printf("Enter the Requests sequence:\n");
 for (i = 0; i < n; i++)
 scanf("%d", &RQ[i]);
 printf("Enter initial head position: ");
 scanf("%d", &initial);
 // Logic for SSTF disk scheduling
 while (count != n) {
 int min = 10000, d, index = -1;
 for (i = 0; i < n; i++) {
 if (RQ[i] != -1) { // Only consider unvisited requests
 d = abs(RQ[i] - initial);
 if (d < min) {
 min = d;
 index = i;
 }
 }
 }
 if (index == -1) {
 break; // Safety check in case of an error
 }
 TotalHeadMovement += min;
 initial = RQ[index];
 RQ[index] = -1;
 count++;
 }
 printf("Total head movement is %d\n", TotalHeadMovement);
 return 0;
}
SSTF Algorithm
 //EXP-9.2
#include <stdio.h>
#include <stdlib.h
int main() {
 int RQ[100], i, n, TotalHeadMovement = 0, initial, count = 0;
 printf("Enter the number of Requests: ");
 scanf("%d", &n)
 printf("Enter the Requests sequence:\n");
 for (i = 0; i < n; i++) {
 scanf("%d", &RQ[i]);
 }
 printf("Enter initial head position: ");
 scanf("%d", &initial);
 while (count < n) {
 int min = 10000, d, index = -1;
 for (i = 0; i < n; i++) {
 if (RQ[i] != -1) {
 d = abs(RQ[i] - initial);
 if (d < min) {
 min = d;
 index = i;
 }
 }
 }
 if (index == -1) {
 break;
 }
 TotalHeadMovement += min;
 initial = RQ[index];
 RQ[index] = -1;
 count++;
 }
 printf("Total head movement is %d\n", TotalHeadMovement);
 return 0;
}
SCAN Algorithm

//EXP-9.3
#include <stdio.h>
#include <stdlib.h>
int main() {
int RQ[100], i, j, n, TotalHeadMovement = 0, initial, size, move
printf("Enter the number of Requests: ");
scanf("%d", &n);
printf("Enter the Requests sequence:\n");
for (i = 0; i < n; i++)
scanf("%d", &RQ[i]);
printf("Enter initial head position: ");
scanf("%d", &initial);
printf("Enter total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction (1 for high, 0 for low): ");
scanf("%d", &move);
for (i = 0; i < n - 1; i++) {
for (j = 0; j < n - i - 1; j++) {
if (RQ[j] > RQ[j + 1]) {
int temp = RQ[j];
RQ[j] = RQ[j + 1];
RQ[j + 1] = temp;
}
}
}
int index = 0;
for (i = 0; i < n; i++) {
if (initial < RQ[i]) {
index = i;
break;
}
}if (move == 1) {
for (i = index; i < n; i++) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}TotalHeadMovement += abs(size - RQ[n - 1] - 1);
initial = size - 1;
for (i = index - 1; i >= 0; i--) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}
} else {
for (i = index - 1; i >= 0; i--) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}TotalHeadMovement += abs(RQ[0] - 0);
initial = 0;
for (i = index; i < n; i++) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is %d\n", TotalHeadMovement);
return 0;
}
C-SCAN Algorithm
//EXP-9.4
#include <stdio.h>
#include <stdlib.h>
int main() {
int RQ[100], i, j, n, TotalHeadMovement = 0, initial, size, move;
printf("Enter the number of Requests: ");
scanf("%d", &n);
printf("Enter the Requests sequence:\n");
for (i = 0; i < n; i++)
scanf("%d", &RQ[i])
printf("Enter initial head position: ");
scanf("%d", &initial);
printf("Enter total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction (1 for high, 0 for low): ");
scanf("%d", &move);
for (i = 0; i < n - 1; i++) {
for (j = 0; j < n - i - 1; j++) {
if (RQ[j] > RQ[j + 1]) {
int temp = RQ[j];
RQ[j] = RQ[j + 1];
RQ[j + 1] = temp;
}
}
}
int index = 0;
for (i = 0; i < n; i++) {
if (initial < RQ[i]) {
index = i;
break;
}
}if (move == 1) {
for (i = index; i < n; i++) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}TotalHeadMovement += abs(size - 1 - initial);
initial = 0;
for (i = 0; i < index; i++) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}
} else {
for (i = index - 1; i >= 0; i--) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
TotalHeadMovement += abs(initial - 0);
initial = size - 1;
for (i = n - 1; i >= index; i--) {
TotalHeadMovement += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is %d\n", TotalHeadMovement);
return 0;
}

Look Scheduling
//EXP-9.5
#include <stdio.h>
#include <stdlib.h>
int main() {
 int RQ[100], i, j, n, TotalHeadMovement = 0, initial, size, move;
 printf("Enter the number of Requests: ");
 scanf("%d", &n);
 printf("Enter the Requests sequence:\n");
 for (i = 0; i < n; i++)
 scanf("%d", &RQ[i]);
 printf("Enter initial head position: ");
 scanf("%d", &initial);
 printf("Enter total disk size: ");
 scanf("%d", &size);
 printf("Enter the head movement direction (1 for high, 0 for low): ");
 scanf("%d", &move);
 for (i = 0; i < n - 1; i++) {
 for (j = 0; j < n - i - 1; j++) {
 if (RQ[j] > RQ[j + 1]) {
 int temp = RQ[j];
 RQ[j] = RQ[j + 1];
 RQ[j + 1] = temp;
 }
 }
 }
 int index = 0;
 for (i = 0; i < n; i++) {
 if (initial < RQ[i]) {
 index = i;
 break;
 }
 }
 if (move == 1) {
 for (i = index; i < n; i++) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 for (i = index - 1; i >= 0; i--) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 } else {
 for (i = index - 1; i >= 0; i--) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 for (i = index; i < n; i++) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 }
 printf("Total head movement is %d\n", TotalHeadMovement);
 return 0;
}
C-LOOK Scheduling


//EXP-9.6
#include <stdio.h>
#include <stdlib.h>
int main() {
 int RQ[100], i, j, n, TotalHeadMovement = 0, initial, size, move;
 printf("Enter the number of Requests: ");
 scanf("%d", &n);
 printf("Enter the Requests sequence:\n");
 for (i = 0; i < n; i++)
 scanf("%d", &RQ[i]);
 printf("Enter initial head position: ");
 scanf("%d", &initial);
 printf("Enter total disk size: ");
 scanf("%d", &size);
 printf("Enter the head movement direction (1 for high, 0 for low): ");
 scanf("%d", &move);
 for (i = 0; i < n - 1; i++) {
 for (j = 0; j < n - i - 1; j++) {
 if (RQ[j] > RQ[j + 1]) {
 int temp = RQ[j];
 RQ[j] = RQ[j + 1];
 RQ[j + 1] = temp;
 }
 }
 }
 int index = 0;
 for (i = 0; i < n; i++) {
 if (initial < RQ[i]) {
 index = i;
 break;
 }
 }
 if (move == 1) {
 for (i = index; i < n; i++) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 } TotalHeadMovement += abs(RQ[n - 1] - RQ[0]);
 initial = RQ[0];
 for (i = 0; i < index; i++) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 } else {
 for (i = index - 1; i >= 0; i--) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 } TotalHeadMovement += abs(RQ[0] - RQ[n - 1]);
 initial = RQ[n - 1];
 for (i = n - 1; i >= index; i--) {
 TotalHeadMovement += abs(RQ[i] - initial);
 initial = RQ[i];
 }
 }printf("Total head movement is %d\n", TotalHeadMovement);
 return 0;
}
Contiguous Allocation Algorithm

//EXP-10.1
#include <stdio.h>
int main() {
 int n, i, j, b[20], sb[20], t[20], x, c[20][20];
 printf("Enter the number of files: ");
 scanf("%d", &n);
 for (i = 0; i < n; i++) {
 printf("Enter the number of blocks occupied by file %d: ", i + 1);
 scanf("%d", &b[i]);
 printf("Enter the starting block of file %d: ", i + 1);
 scanf("%d", &sb[i]);
 t[i] = sb[i];
 for (j = 0; j < b[i]; j++) {
 c[i][j] = sb[i]++;
 }
 }
 printf("\nFilename\tStart Block\tLength\n");
 for (i = 0; i < n; i++) {
 printf("%d\t%d\t%d\n", i + 1, t[i], b[i]);
 }
 printf("\nEnter file number to display details: ");
 scanf("%d", &x);
 if (x < 1 || x > n) {
 printf("Invalid file number!\n");
 } else {
 printf("File name: %d\n", x);
 printf("Length: %d\n", b[x - 1]);
 printf("Blocks occupied: ");
 
 for (i = 0; i < b[x - 1]; i++) {
 printf("%4d", c[x - 1][i]);
 }
 printf("\n");
 }
 
 return 0;
}
Linked Allocation Algorithm

//EXP-10.2
#include <stdio.h>
struct file {
 char fname[10];
 int start, size, block[10];
} f[10];
int main() {
 int i, j, n;
 printf("Enter number of files: ");
 scanf("%d", &n);
 for (i = 0; i < n; i++) {
 printf("Enter file name: ");
 scanf("%s", f[i].fname);
 printf("Enter starting block: ");
 scanf("%d", &f[i].start);
 f[i].block[0] = f[i].start;
 printf("Enter number of blocks: ");
 scanf("%d", &f[i].size);
 printf("Enter block numbers: ");
 for (j = 1; j < f[i].size; j++) { // Start from index 1
 scanf("%d", &f[i].block[j]);
 }
 }
 printf("\nFile\tStart\tSize\tBlocks\n");
 for (i = 0; i < n; i++) {
 printf("%s\t%d\t%d\t", f[i].fname, f[i].start, f[i].size);
 
 for (j = 0; j < f[i].size - 1; j++) {
 printf("%d--->", f[i].block[j]);
 }
 printf("%d", f[i].block[j]); // Print last block without arrow
 printf("\n");
 }
 return 0;
}
Indexed Allocation Algorithm

//EXP-10.3
#include <stdio.h>
int main() {
int n, m[20], i, j, sb[20], s[20], b[20][20], x;
printf("Enter number of files: ");
scanf("%d", &n);
for (i = 0; i < n; i++) {
printf("Enter starting block and size of file %d: ", i + 1);
scanf("%d%d", &sb[i], &s[i]);
printf("Enter number of blocks occupied by file %d: ", i + 1);
scanf("%d", &m[i]);
printf("Enter blocks of file %d: ", i + 1);
for (j = 0; j < m[i]; j++) {
scanf("%d", &b[i][j]);
}
}
printf("\nFile\tIndex\tLength\n");
for (i = 0; i < n; i++) {
printf("%d\t%d\t%d\n", i + 1, sb[i], m[i]);
}
printf("\nEnter file number to display details: ");
scanf("%d", &x);
if (x < 1 || x > n) {
printf("Invalid file number!\n");
} else {
i = x - 1;
printf("File name: %d\n", x);
printf("Index: %d\n", sb[i]);
printf("Blocks occupied: ");
for (j = 0; j < m[i]; j++) {
printf("%3d", b[i][j]);
}
printf("\n");
}
return 0;
}
